############################################################
#
#	distortos GNU ld script generation
#
#	(c) 2017-2017 elbe informatik GmbH
#
#	$Id$
#

# writes a linker script
# optional additional parameters: triples of the form
# memoryname start size
function(generate_ldscript
	 outfile
	 chipName
	 romAddress romSize
	 ramAddress ramSize
)
	list(LENGTH ARGN argc)
#	message(STATUS "${argc} / ${ARGN}")
	math(EXPR ntrip "${argc} % 3")
	if(NOT (ntrip EQUAL 0))
		message(FATAL_ERROR "invalid additional memory regions")
	endif()
	math(EXPR carg "${argc} - 1")
	string(TIMESTAMP now "%Y-%m-%d %H:%M:%S")
	foreach(iarg RANGE 0 ${carg} 3)
		math(EXPR iarg1 "${iarg} + 1")
		math(EXPR iarg2 "${iarg1} + 1")
		list(GET ARGN ${iarg} memoryName)
		list(GET ARGN ${iarg1} memoryAddress)
		list(GET ARGN ${iarg2} memorySize)

		set(headerComments "${headerComments} * - ${memorySize} bytes of ${memoryName} at ${memoryAddress};\n")
		set(memoryEntries "${memoryEntries}\t${memoryName} : org = ${memoryAddress}, len = ${memorySize}\n")
		string(CONCAT memorySizes "${memorySizes}"
		    "PROVIDE(__${memoryName}_start = ORIGIN(${memoryName}));\n"
		    "PROVIDE(__${memoryName}_size = LENGTH(${memoryName}));\n"
		    "PROVIDE(__${memoryName}_end = ORIGIN(${memoryName}) + LENGTH(${memoryName}));\n\n"
		)
		string(CONCAT dataArrayEntries "${dataArrayEntries}"
		    "\t\tLONG(LOADADDR(.${memoryName}.data)); LONG(ADDR(.${memoryName}.data)); "
		    "LONG(ADDR(.${memoryName}.data) + SIZEOF(.${memoryName}.data));\n"
		)
		string(CONCAT bssArrayEntries "${bssArrayEntries}"
		    "\t\tLONG(0); LONG(ADDR(.${memoryName}.bss)); LONG(ADDR(.${memoryName}.bss) + SIZEOF(.${memoryName}.bss));\n"
		)

		string(CONCAT sectionEntries "${sectionEntries}"
			"	.${memoryName}.bss :\n"
			"	{\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_bss_start = .);\n\n"
			"		*(.${memoryName}.bss);\n\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_bss_end = .);\n"
			"	} > ${memoryName} AT > ${memoryName}\n\n"
			"	.${memoryName}.data :\n"
			"	{\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_data_init_start = LOADADDR(.${memoryName}.data));\n"
			"		PROVIDE(__${memoryName}_data_start = .);\n\n"
			"		*(.${memoryName}.data);\n\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_data_end = .);\n"
			"	} > ${memoryName} AT > rom\n\n"
			"	.${memoryName}.noinit (NOLOAD) :\n"
			"	{\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_noinit_start = .);\n\n"
			"		*(.${memoryName}.noinit);\n\n"
			"		. = ALIGN(4);\n"
			"		PROVIDE(__${memoryName}_noinit_end = .);\n"
			"	} > ${memoryName} AT > ${memoryName}\n\n"
		)

		string(CONCAT sectionSizes "${sectionSizes}"
			"PROVIDE(__${memoryName}_bss_size = SIZEOF(.${memoryName}.bss));\n"
			"PROVIDE(__${memoryName}_data_size = SIZEOF(.${memoryName}.data));\n"
			"PROVIDE(__${memoryName}_noinit_size = SIZEOF(.${memoryName}.noinit));\n"
		)
	endforeach()
	string(CONCAT DISTORTOS_LDSCRIPT
		"/**\n"
		" * \\file\n"
		" * \\brief Linker script for ${chipName} chip:\n"
		" * - ${romSize} bytes of rom at ${romAddress};\n"
		" * - ${ramSize} bytes of ram at ${ramAddress};\n"
		"${headerComments}"
		" *\n"
		" * \\author Copyright (C) 2014-2017 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info\n"
		" *\n"
		" * \\par License\n"
		" * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not\n"
		" * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
		" *\n"
		" * \\warning\n"
		" * Automatically generated file - do not edit!\n"
		" *\n"
		" * \\date ${now}\n"
		" */\n"
		"\n"
		"SEARCH_DIR(.);\n"
		"OUTPUT_FORMAT(\"elf32-littlearm\", \"elf32-bigarm\", \"elf32-littlearm\");\n"
		"OUTPUT_ARCH(arm);\n"
		"\n"
		"/*---------------------------------------------------------------------------------------------------------------------+\n"
		"| available memories\n"
		"+---------------------------------------------------------------------------------------------------------------------*/\n"
		"\n"
		"MEMORY\n"
		"{\n"
		"	rom : org = ${romAddress}, len = ${romSize}\n"
		"	ram : org = ${ramAddress}, len = ${ramSize}\n"
		"${memoryEntries}"
		"}\n"
		"\n"
		"PROVIDE(__rom_start = ORIGIN(rom));\n"
		"PROVIDE(__rom_size = LENGTH(rom));\n"
		"PROVIDE(__rom_end = ORIGIN(rom) + LENGTH(rom));\n"
		"\n"
		"PROVIDE(__ram_start = ORIGIN(ram));\n"
		"PROVIDE(__ram_size = LENGTH(ram));\n"
		"PROVIDE(__ram_end = ORIGIN(ram) + LENGTH(ram));\n"
		"\n"
		"${memorySizes}"
		"/*---------------------------------------------------------------------------------------------------------------------+\n"
		"| entry point\n"
		"+---------------------------------------------------------------------------------------------------------------------*/\n"
		"\n"
		"ENTRY(Reset_Handler);\n"
		"\n"
		"/*---------------------------------------------------------------------------------------------------------------------+\n"
		"| put data in sections\n"
		"+---------------------------------------------------------------------------------------------------------------------*/\n"
		"\n"
		"SECTIONS\n"
		"{\n"
		"	.text :\n"
		"	{\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__text_start = .);\n"
		"\n"
		"		/* sub-section: .vectors */\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__vectors_start = .);\n"
		"\n"
		"		KEEP(*(.coreVectors));\n"
		"		KEEP(*(.chipVectors));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__vectors_end = .);\n"
		"\n"
		"		/* end of sub-section: .vectors */\n"
		"\n"
		"		*(.text* .gnu.linkonce.t.*);\n"
		"		*(.rodata* .gnu.linkonce.r.*);\n"
		"		*(.glue_7t .glue_7);\n"
		"\n"
		"		*(.ARM.extab* .gnu.linkonce.armextab.*);	/* exception unwinding information */\n"
		"		*(.gcc_except_table);				/* information used for stack unwinding during exception */\n"
		"		*(.eh_frame_hdr);				/* additional information about .ex_frame section */\n"
		"		*(.eh_frame);					/* information used for stack unwinding during exception */\n"
		"\n"
		"		/* sub-section: data_array */\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__data_array_start = .);\n"
		"\n"
		"		LONG(LOADADDR(.data)); LONG(ADDR(.data)); LONG(ADDR(.data) + SIZEOF(.data));\n"
		"${dataArrayEntries}"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__data_array_end = .);\n"
		"\n"
		"		/* end of sub-section: data_array */\n"
		"\n"
		"		/* sub-section: bss_array */\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__bss_array_start = .);\n"
		"\n"
		"		LONG(0); LONG(ADDR(.bss)); LONG(ADDR(.bss) + SIZEOF(.bss));\n"
		"		LONG(0xed419f25); LONG(ADDR(.main_stack)); LONG(ADDR(.main_stack) + SIZEOF(.main_stack));\n"
		"		LONG(0xed419f25); LONG(ADDR(.process_stack)); LONG(ADDR(.process_stack) + SIZEOF(.process_stack));\n"
		"${bssArrayEntries}"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__bss_array_end = .);\n"
		"\n"
		"		/* end of sub-section: bss_array */\n"
		"\n"
		"		/* sub-sections: init, preinit_array, init_array and fini_array */\n"
		"\n"
		"		KEEP(*(.init));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__preinit_array_start = .);\n"
		"\n"
		"		KEEP(*(.preinit_array));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__preinit_array_end = .);\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__init_array_start = .);\n"
		"\n"
		"		KEEP(*(SORT(.init_array.*)));\n"
		"		KEEP(*(.init_array));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__init_array_end = .);\n"
		"\n"
		"		KEEP(*(.fini));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__fini_array_start = .);\n"
		"\n"
		"		KEEP(*(.fini_array));\n"
		"		KEEP(*(SORT(.fini_array.*)));\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__fini_array_end = .);\n"
		"\n"
		"		/* end of sub-sections: init, preinit_array, init_array and fini_array */\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__text_end = .);\n"
		"	} > rom AT > rom\n"
		"\n"
		"	.ARM.exidx :\n"
		"	{\n"
		"		PROVIDE(__exidx_start = .);\n"
		"\n"
		"		*(.ARM.exidx* .gnu.linkonce.armexidx.*);\n"
		"\n"
		"		PROVIDE(__exidx_end = .);\n"
		"	} > rom AT > rom								/* index entries for section unwinding */\n"
		"\n"
		"	.main_stack :\n"
		"	{\n"
		"		. = ALIGN(8);\n"
		"		PROVIDE(__main_stack_start = .);\n"
		"\n"
		"		. += __main_stack_size;\n"
		"\n"
		"		. = ALIGN(8);\n"
		"		PROVIDE(__main_stack_end = .);\n"
		"	} > ram AT > ram\n"
		"\n"
		"	.bss :\n"
		"	{\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__bss_start = .);\n"
		"\n"
		"		*(.bss* .gnu.linkonce.b.*);\n"
		"		*(COMMON);\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__bss_end = .);\n"
		"	} > ram AT > ram\n"
		"\n"
		"	.data :\n"
		"	{\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__data_init_start = LOADADDR(.data));\n"
		"		PROVIDE(__data_start = .);\n"
		"\n"
		"		*(.data* .gnu.linkonce.d.*);\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__data_end = .);\n"
		"	} > ram AT > rom\n"
		"\n"
		"	.noinit (NOLOAD) :\n"
		"	{\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__noinit_start = .);\n"
		"\n"
		"		*(.noinit);\n"
		"\n"
		"		. = ALIGN(4);\n"
		"		PROVIDE(__noinit_end = .);\n"
		"	} > ram AT > ram\n"
		"\n"
		"	. = ALIGN(8);\n"
		"	PROVIDE(__heap_start = .);\n"
		"	. = __ram_end - __process_stack_size;\n"
		"	PROVIDE(__heap_end = .);\n"
		"\n"
		"	.process_stack . :\n"
		"	{\n"
		"		. = ALIGN(8);\n"
		"		PROVIDE(__process_stack_start = .);\n"
		"\n"
		"		. += __process_stack_size;\n"
		"\n"
		"		. = ALIGN(8);\n"
		"		PROVIDE(__process_stack_end = .);\n"
		"	} > ram AT > ram\n"
		"\n"
		"${sectionEntries}"
		"	.stab				0 (NOLOAD) : { *(.stab); }\n"
		"	.stabstr			0 (NOLOAD) : { *(.stabstr); }\n"
		"	/* DWARF debug sections.\n"
		"	* Symbols in the DWARF debugging sections are relative to the beginning\n"
		"	* of the section so we begin them at 0. */\n"
		"	/* DWARF 1 */\n"
		"	.debug				0 : { *(.debug); }\n"
		"	.line				0 : { *(.line); }\n"
		"	/* GNU DWARF 1 extensions */\n"
		"	.debug_srcinfo		0 : { *(.debug_srcinfo); }\n"
		"	.debug_sfnames		0 : { *(.debug_sfnames); }\n"
		"	/* DWARF 1.1 and DWARF 2 */\n"
		"	.debug_aranges		0 : { *(.debug_aranges); }\n"
		"	.debug_pubnames		0 : { *(.debug_pubnames); }\n"
		"	/* DWARF 2 */\n"
		"	.debug_info			0 : { *(.debug_info .gnu.linkonce.wi.*); }\n"
		"	.debug_abbrev		0 : { *(.debug_abbrev); }\n"
		"	.debug_line			0 : { *(.debug_line); }\n"
		"	.debug_frame		0 : { *(.debug_frame); }\n"
		"	.debug_str			0 : { *(.debug_str); }\n"
		"	.debug_loc			0 : { *(.debug_loc); }\n"
		"	.debug_macinfo		0 : { *(.debug_macinfo); }\n"
		"	/* SGI/MIPS DWARF 2 extensions */\n"
		"	.debug_weaknames	0 : { *(.debug_weaknames); }\n"
		"	.debug_funcnames	0 : { *(.debug_funcnames); }\n"
		"	.debug_typenames	0 : { *(.debug_typenames); }\n"
		"	.debug_varnames		0 : { *(.debug_varnames); }\n"
		"\n"
		"	.note.gnu.arm.ident	0 : { KEEP(*(.note.gnu.arm.ident)); }\n"
		"	.ARM.attributes		0 : { KEEP(*(.ARM.attributes)); }\n"
		"	/DISCARD/				: { *(.note.GNU-stack); }\n"
		"}\n"
		"\n"
		"PROVIDE(__text_size = SIZEOF(.text));\n"
		"PROVIDE(__exidx_size = SIZEOF(.ARM.exidx));\n"
		"PROVIDE(__bss_size = SIZEOF(.bss));\n"
		"PROVIDE(__data_size = SIZEOF(.data));\n"
		"PROVIDE(__noinit_size = SIZEOF(.noinit));\n"
		"${sectionSizes}"
		"\n"
		"PROVIDE(__bss_start__ = __bss_start);\n"
		"PROVIDE(__bss_end__ = __bss_end);\n"
	)

	file(WRITE "${outfile}" "${DISTORTOS_LDSCRIPT}")
endfunction(generate_ldscript)

function(generate_symbolsld
	 outfile
)
	string(TIMESTAMP now "%Y-%m-%d %H:%M:%S")
	string(CONCAT DISTORTOS_SYMBOLSLD
		"/**\n"
		" * \\file\n"
		" * \\brief Symbols for linker script\n"
		" *\n"
		" * \\author Copyright (C) 2017 Kamil Szczygiel http://www.distortec.com http://www.freddiechopin.info\n"
		" *\n"
		" * \\par License\n"
		" * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not\n"
		" * distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
		" *\n"
		" * \\warning\n"
		" * Automatically generated file - do not edit!\n"
		" *\n"
		" * \\date ${now}\n"
		" */\n"
		"\n"
		"PROVIDE(__main_stack_size = ALIGN(${ARCHITECTURE_ARMV6_M_ARMV7_M_MAIN_STACK_SIZE}, ${ARCHITECTURE_STACK_ALIGNMENT}));\n"
		"PROVIDE(__process_stack_size = ALIGN(${DISTORTOS_MAIN_THREAD_STACK_SIZE}, ${ARCHITECTURE_STACK_ALIGNMENT}) + "
			"ALIGN(${DISTORTOS_STACK_GUARD_SIZE}, ${ARCHITECTURE_STACK_ALIGNMENT}));\n"
	)
	file(WRITE "${outfile}" "${DISTORTOS_SYMBOLSLD}")
endfunction(generate_symbolsld)
