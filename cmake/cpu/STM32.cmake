############################################################
#
#	CMake configuration for CPU STM32
#
#	(c) 2017-2017 elbe informatik GmbH
#
#	$Id$
#

message(STATUS "Configuring for CPU STM32")

# Set the CPU
set_dconf(CHIP_STM32 true BOOL INTERNAL)

#
# fixed configuration
#
set_dconf(CHIP_STM32_GPIOV2 TRUE BOOL INTERNAL)
set_dconf(CHIP_STM32_SPIV2 TRUE BOOL INTERNAL)
set_dconf(CHIP_STM32_USARTV2 TRUE BOOL INTERNAL)

#
# user settable parameters
#
if(CHIP_STM32_GPIOV2_HAS_GPIOA AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOA_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOA_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port A")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOB AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOB_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOB_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port B")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOC AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOC_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOC_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port C")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOD AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOD_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOD_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port D")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOE AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOE_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOE_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port E")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOF AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOF_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOF_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port F")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOG AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOG_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOG_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port G")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOH AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOH_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOH_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port H")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOI AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOI_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOI_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port I")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOJ AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOJ_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOJ_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port J")
endif()
if(CHIP_STM32_GPIOV2_HAS_GPIOK AND NOT DEFINED CHIP_STM32_GPIOV2_GPIOK_ENABLE)
	set_dconf(CHIP_STM32_GPIOV2_GPIOK_ENABLE FALSE BOOL "Enable or disable GPIOv2 driver for GPIO port K")
endif()

if(CHIP_STM32_USARTV2_HAS_USART1 AND NOT DEFINED CHIP_STM32_USARTV2_USART1_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART1_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART1")
endif()
if(CHIP_STM32_USARTV2_HAS_USART2 AND NOT DEFINED CHIP_STM32_USARTV2_USART2_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART2_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART2")
endif()
if(CHIP_STM32_USARTV2_HAS_USART3 AND NOT DEFINED CHIP_STM32_USARTV2_USART3_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART3_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART3")
endif()
if(CHIP_STM32_USARTV2_HAS_USART4 AND NOT DEFINED CHIP_STM32_USARTV2_USART4_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART4_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART4")
endif()
if(CHIP_STM32_USARTV2_HAS_USART5 AND NOT DEFINED CHIP_STM32_USARTV2_USART5_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART5_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART5")
endif()
if(CHIP_STM32_USARTV2_HAS_USART6 AND NOT DEFINED CHIP_STM32_USARTV2_USART6_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART6_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART6")
endif()
if(CHIP_STM32_USARTV2_HAS_USART7 AND NOT DEFINED CHIP_STM32_USARTV2_USART7_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART7_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART7")
endif()
if(CHIP_STM32_USARTV2_HAS_USART8 AND NOT DEFINED CHIP_STM32_USARTV2_USART8_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_USART8_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for USART8")
endif()
# same for UART
if(CHIP_STM32_USARTV2_HAS_UART1 AND NOT DEFINED CHIP_STM32_USARTV2_UART1_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART1_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART1")
endif()
if(CHIP_STM32_USARTV2_HAS_UART2 AND NOT DEFINED CHIP_STM32_USARTV2_UART2_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART2_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART2")
endif()
if(CHIP_STM32_USARTV2_HAS_UART3 AND NOT DEFINED CHIP_STM32_USARTV2_UART3_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART3_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART3")
endif()
if(CHIP_STM32_USARTV2_HAS_UART4 AND NOT DEFINED CHIP_STM32_USARTV2_UART4_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART4_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART4")
endif()
if(CHIP_STM32_USARTV2_HAS_UART5 AND NOT DEFINED CHIP_STM32_USARTV2_UART5_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART5_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART5")
endif()
if(CHIP_STM32_USARTV2_HAS_UART6 AND NOT DEFINED CHIP_STM32_USARTV2_UART6_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART6_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART6")
endif()
if(CHIP_STM32_USARTV2_HAS_UART7 AND NOT DEFINED CHIP_STM32_USARTV2_UART7_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART7_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART7")
endif()
if(CHIP_STM32_USARTV2_HAS_UART8 AND NOT DEFINED CHIP_STM32_USARTV2_UART8_ENABLE)
	set_dconf(CHIP_STM32_USARTV2_UART8_ENABLE FALSE BOOL "Enable or disable USARTv2 driver for UART8")
endif()

#
# add source files
#

set(tmp_arch_dir "${DISTORTOS_TOPDIR}/source/chip/STM32")

# add specific #include path
list(APPEND DISTORTOS_ARCH_INCLUDE_PATH
	"${tmp_arch_dir}/STM32/include"
	"${DISTORTOS_TOPDIR}/external/CMSIS"
)

if(DISTORTOS_DRIVER_ENABLE)
list(APPEND DISTORTOS_ARCH_INCLUDE_PATH
	"${tmp_arch_dir}/peripherals/GPIOv2/include"
	"${tmp_arch_dir}/peripherals/SPIv2/include"
	"${tmp_arch_dir}/peripherals/USARTv2/include"
)
endif()

if(DISTORTOS_DRIVER_ENABLE)
# add arch specific source files
list(APPEND DISTORTOS_SRCS
	"${tmp_arch_dir}/peripherals/STM32-peripheralsLowLevelInitialization.cpp"
	"${tmp_arch_dir}/peripherals/GPIOv2/STM32-GPIOv2-ChipInputPin.cpp"
	"${tmp_arch_dir}/peripherals/GPIOv2/STM32-GPIOv2.cpp"
	"${tmp_arch_dir}/peripherals/GPIOv2/STM32-GPIOv2-ChipOutputPin.cpp"
	"${tmp_arch_dir}/peripherals/SPIv2/STM32-SPIv2-ChipSpiMasterLowLevel.cpp"
	"${tmp_arch_dir}/peripherals/SPIv2/STM32-SPIv2-spiLowLevelInitialization.cpp"
	"${tmp_arch_dir}/peripherals/SPIv2/STM32-SPIv2-spis.cpp"
	"${tmp_arch_dir}/peripherals/USARTv2/STM32-USARTv2-uarts.cpp"
	"${tmp_arch_dir}/peripherals/USARTv2/STM32-USARTv2-usartLowLevelInitialization.cpp"
	"${tmp_arch_dir}/peripherals/USARTv2/STM32-USARTv2-ChipUartLowLevel.cpp"
)
endif()

#
# linker script settings
#
add_memory_region("flash" "${CHIP_ROM_ADDRESS}" ${CHIP_ROM_SIZE} "ROM" VMADDR "${CHIP_ROM_VADDR}")

# STM32 is the most generic family designator, nothing to include
